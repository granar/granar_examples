---
title: "GRANAR-MECHA USERGUIDE"
format: html
editor: source
bibliography: bibliography.bib
---

# What is GRANAR?

GRANAR stands for Generator of Root ANAtomy in R. The GRANAR model is able to generate complete cell networks of root cross-sections using a small set of root anatomical parameters These root anatomical features can typically be gathered using software image analysis such as [ImageJ](https://imagej.net/Welcome) [@Schneider]. Once the root anatomy is created, the cell network can be saved as an eXtended Markup Language (XML) file. The structure of the XML files created by GRANAR are identical to the ones created by [CellSeT](https://www.nottingham.ac.uk/research/groups/cvl/software/cellset.aspx) [@Pound] (a software which digitize root anatomical network).

# How to use GRANAR?

GRANAR is available as an R package. The *'granar'* package can be found on [GitHub](https://github.com/granar/granar). Alternatively, GRANAR can be installed localy by simply executing the following line in the [R](https://cran.r-project.org/) environment:

```{r GRANAR, include  = F, eval = F}
# Load GRANAR with local functions
granar_path <- "../granar/R/"
for(i in list.files(granar_path)){
  # print(i)
  source(paste0(granar_path, i))
}

```

```{r Github, eval = FALSE}
install_github("granar/granar") 
```

```{r Load GRANAR}
library(granar)
```

Granar was built upon the following dependencies :

```{r preambule, echo=T, warning=F, message=F}
# setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # Set working directory to the current file
library(packcircles)
library(reticulate)
library(xml2)
library(tidyverse)
library(plyr)
library(devtools)
library(ggplot2)
library(dplyr)
library(sf)
library(devtools)
library(deldir)
```

To run GRANAR, we use :

-   The function *read_param_xml()* loads parameters from xml files
-   The function *create_anatomy()* generates the virtual cross section with input params
-   The function *plot_anatomy()* displays the generated anatomy

### Monocot (wheat)

```{r run GRANAR, results=F}
param1 <- read_param_xml(path = "modelparam/Wheat_F_Atkinson_2017.xml")
sim1 <- create_anatomy(parameters = param1)
plot_anatomy(sim1)
```

### Primary growth dicot (tomato)

```{r run GRANAR2, results=F}
param2 <- read_param_xml(path = "modelparam/Tomato_primary.xml")
sim2 <- create_anatomy(parameters = param2)
plot_anatomy(sim2)
```

### Secondary growth dicot (tomato)

```{r run GRANAR3, results=F}
param3 <- read_param_xml(path = "modelparam/Tomato_secondary.xml")
sim3 <- create_anatomy(parameters = param3)
plot_anatomy(sim3)
```

To save virtual anatomies, we can use the function *write_anatomy_xml()* :

```{r write_anatomy, eval = F}
write_anatomy_xml(sim = sim1, path = "cellsetdata/Wheat.xml")
write_anatomy_xml(sim = sim2, path = "cellsetdata/Tomato_primary.xml")
write_anatomy_xml(sim = sim3, path = "cellsetdata/Tomato_secondary.xml")
```

```{r load anatomy, include = F, eval = F}
sim1 <- get_root_section(path = "cellsetdata/Wheat.xml")

ggplot(sim1) +
    # geom_polygon(aes_string("x", "y", group="id_cell", fill=col), colour="white") +
    geom_polygon(aes(x = x, y = y, fill = type, group = id_cell),
                 color = "white") +
    theme_classic() +
    coord_fixed() +
    theme(axis.line=element_blank(),
          axis.text.x=element_blank(),
          axis.text.y=element_blank(),
          axis.ticks=element_blank(),
          axis.title.x=element_blank(),
          axis.title.y=element_blank())
```

# MECHA

MECHA is the solver of local conductivities (Couvreur 2018)

Set up steps to run it in local :

1.  Open **ANACONDA NAVIGATOR**

2.  Create a new environment with **python 3.7** (in this work it is called **GRANAR-MECHA**)\
    `conda create -n GRANAR-MECHA python=3.7`

3.  Load that environment

    `conda activate GRANAR-MECHA`

4.  Install MECHA requirements in the environement :\
    `conda install numpy`\
    `conda install scipy`\
    `conda install matplotlib`\
    `conda install lxml`\
    `conda install pip`\
    `pip install networkx==1.9.1`

By default, MECHA loads the cross section named *current_root.xml* in the *cellsetdata* folder.

```{r MECHA, eval = F}
# Load python environment
use_condaenv("GRANAR-MECHA")

sys <- import("sys", convert=T)
try(py_run_file("MECHAv4_light.py"))
```

To load outputs of MECHA, we can use the function
