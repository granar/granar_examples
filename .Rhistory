# setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # Set working directory to the current file
rm(list = ls())
libs <- c("pander", "readxl", "reticulate", "xml2", "tidyverse", "dplyr", "devtools", "viridis", "ggplot2", "gridExtra", "sf", "deldir", "packcircles")
# "riot"
#==========================================================================
for(pk in libs) {
if (!requireNamespace(pk, quietly = TRUE)) {
# If not installed, install the package
install.packages(pk)
}
library(pk, character.only = T)
}
# Load utilitarian functions
source("functions.R")
# Load GRANAR with local functions
granar_path <- "../granar/R/"
for(i in list.files(granar_path)){
# print(i)
source(paste0(granar_path, i))
}
anatomy_file <- "Wheat.xml"
file.copy(from = paste0("Anatomies/", anatomy_file),to = "MECHA/cellsetdata/", overwrite = T)
file.rename(paste0("MECHA/cellsetdata/", anatomy_file), "MECHA/cellsetdata/current_root.xml")
sim1 <- get_root_section(path = paste0("Anatomies/", anatomy_file))
ggplot(sim1) +
# geom_polygon(aes_string("x", "y", group="id_cell", fill=col), colour="white") +
geom_polygon(aes(x = x, y = y, fill = type, group = id_cell),
color = "white") +
theme_classic() +
coord_fixed() +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank())
use_condaenv("GRANAR-MECHA")
sys <- import("sys", convert=T)
unlink("MECHA/Projects/granar/out/Tomato/Root/Project_Test/results/", force = T)
try(py_run_file("MECHA/MECHA_example.py"))
rp <- "MECHA/Projects/granar/out/Tomato/Root/Project_Test/results/"
Flux1 <- ApoSymp(paste0(rp,"Macro_prop_1,1.txt"))
rp <- "MECHA/Projects/granar/out/Tomato/Root/Project_Test/results/"
Flux1 <- ApoSymp(paste0(rp,"Macro_prop_1,0.txt"))
Flux2 <- ApoSymp(paste0(rp,"Macro_prop_2,1.txt"))
Flux3 <- ApoSymp(paste0(rp,"Macro_prop_3,2.txt"))
plot_water_flux(Flux1, apobar = 1)
plot_water_flux(Flux2, apobar = 2)
plot_water_flux(Flux3, apobar = 3)
Barrier_types <- read_xlsx("./MECHA/Barrier_types.xlsx") %>%
mutate(ID = as.factor(ID)) %>%
mutate(Barrier_name = paste0("En.", Endodermis, "|Ex.", Exodermis))
conds <- load_MECHA_out()
conds <- conds %>%
mutate(ID = as.factor(ID),
kr = as.numeric(kr),
Kx = as.numeric(Kx)) %>%
left_join(Barrier_types, by = "ID") %>%
filter(Endodermis %in% c("-", "CS", "Sub") & Exodermis %in% c("-", "CS", "Sub"))
conds <- conds[order(conds$kr),]
pander(conds)
ggplot(data = conds) +
geom_col(aes(x = Barrier_name,
y = kr,
fill = Endodermis,
color = Exodermis
),
size = 2
) +
scale_color_viridis(discrete = T) +
scale_fill_viridis(discrete = T) +
theme_classic() +
# facet_wrap(~Exodermis) +
theme(axis.text.x = element_text(angle = 90))
ggplot(data = conds) +
geom_col(aes(x = Barrier_name,
y = kr,
fill = Endodermis,
color = Exodermis
),
size = 2
) +
scale_color_viridis(discrete = T) +
scale_fill_viridis(discrete = T) +
theme_classic() +
# facet_wrap(~Exodermis) +
theme(axis.text.x = element_text(angle = 90))
# Load Barriers names and IDs
Barrier_types <- read_xlsx("./MECHA/Barrier_types.xlsx") %>%
mutate(ID = as.factor(ID)) %>%
mutate(Barrier_name = paste0("En.", Endodermis, "|Ex.", Exodermis))
# Use custom function to load outputs of MECHA
conds <- load_MECHA_out()
# Process and select the outputs
conds <- conds %>%
mutate(ID = as.factor(ID),
kr = as.numeric(kr),
Kx = as.numeric(Kx)) %>%
left_join(Barrier_types, by = "ID") %>%
filter(Endodermis %in% c("-", "CS", "Sub") & Exodermis %in% c("-", "CS", "Sub"))
conds <- conds[order(conds$kr),]
# pander(conds)
# Quick and uggly Plot
ggplot(data = conds) +
geom_col(aes(x = Barrier_name,
y = kr,
fill = Endodermis,
color = Exodermis
),
size = 2
) +
scale_color_viridis(discrete = T) +
scale_fill_viridis(discrete = T) +
theme_classic() +
# facet_wrap(~Exodermis) +
theme(axis.text.x = element_text(angle = 90))
# Quick and uggly Plot
ggplot(data = conds) +
geom_col(aes(x = Barrier_name,
y = kr,
fill = Endodermis,
color = Exodermis
),
size = 2
) +
# scale_color_viridis(discrete = T) +
# scale_fill_viridis(discrete = T) +
theme_classic() +
# facet_wrap(~Exodermis) +
theme(axis.text.x = element_text(angle = 90))
# Quick and uggly Plot
ggplot(data = conds) +
geom_col(aes(x = Barrier_name,
y = kr,
fill = Endodermis,
color = Exodermis
),
size = 2
) +
scale_color_viridis(discrete = T, option = "inferno") +
scale_fill_viridis(discrete = T) +
theme_classic() +
# facet_wrap(~Exodermis) +
theme(axis.text.x = element_text(angle = 90))
# Quick and uggly Plot
ggplot(data = conds) +
geom_col(aes(x = Barrier_name,
y = kr,
fill = Endodermis,
color = Exodermis
),
size = 2
) +
scale_color_viridis(discrete = T, option = "inferno") +
scale_fill_viridis(discrete = T, option = "inferno") +
theme_classic() +
# facet_wrap(~Exodermis) +
theme(axis.text.x = element_text(angle = 90))
# Quick and uggly Plot
ggplot(data = conds) +
geom_col(aes(x = Barrier_name,
y = kr,
fill = Endodermis,
color = Exodermis
),
size = 2
) +
scale_color_viridis(discrete = T, option = "inferno") +
scale_fill_viridis(discrete = T, option = "magma") +
theme_classic() +
# facet_wrap(~Exodermis) +
theme(axis.text.x = element_text(angle = 90))
# Quick and uggly Plot
ggplot(data = conds) +
geom_col(aes(x = Barrier_name,
y = kr,
fill = Endodermis,
color = Exodermis
),
size = 2
) +
scale_color_viridis(discrete = T, option = "magma") +
scale_fill_viridis(discrete = T, option = "magma") +
theme_classic() +
# facet_wrap(~Exodermis) +
theme(axis.text.x = element_text(angle = 90))
# Load Barriers names and IDs
Barrier_types <- read_xlsx("./MECHA/Barrier_types.xlsx") %>%
mutate(ID = as.factor(ID)) %>%
mutate(Barrier_name = paste0("En.", Endodermis, "|Ex.", Exodermis))
# Use custom function to load outputs of MECHA
conds <- load_MECHA_out()
# Process and select the outputs
conds <- conds %>%
mutate(ID = as.factor(ID),
kr = as.numeric(kr),
Kx = as.numeric(Kx)) %>%
left_join(Barrier_types, by = "ID") %>%
filter(Endodermis %in% c("-", "CS", "Sub") & Exodermis %in% c("-", "CS", "Sub"))
conds <- conds[order(conds$kr),]
# pander(conds)
# Quick and uggly Plot
ggplot(data = conds) +
geom_col(aes(x = Barrier_name,
y = kr,
fill = Endodermis,
color = Exodermis
),
size = 2
) +
scale_color_viridis(discrete = T, option = "inferno") +
scale_fill_viridis(discrete = T, option = "inferno") +
theme_classic() +
# facet_wrap(~Exodermis) +
theme(axis.text.x = element_text(angle = 90))
# Quick and uggly Plot
ggplot(data = conds) +
geom_col(aes(x = Barrier_name,
y = kr,
fill = Endodermis,
color = Exodermis
),
size = 2
) +
scale_color_viridis(discrete = T, option = "inferno") +
scale_fill_viridis(discrete = T, option = "plasma") +
theme_classic() +
# facet_wrap(~Exodermis) +
theme(axis.text.x = element_text(angle = 90))
# Quick and uggly Plot
ggplot(data = conds) +
geom_col(aes(x = Barrier_name,
y = kr,
fill = Endodermis,
color = Exodermis
),
size = 2
) +
scale_color_viridis(discrete = T, option = "plasma") +
scale_fill_viridis(discrete = T, option = "plasma") +
theme_classic() +
# facet_wrap(~Exodermis) +
theme(axis.text.x = element_text(angle = 90))
# Load Barriers names and IDs
Barrier_types <- read_xlsx("./MECHA/Barrier_types.xlsx") %>%
mutate(ID = as.factor(ID)) %>%
mutate(Barrier_name = paste0("En.", Endodermis, " - Ex.", Exodermis))
# Use custom function to load outputs of MECHA
conds <- load_MECHA_out()
# Process and select the outputs
conds <- conds %>%
mutate(ID = as.factor(ID),
kr = as.numeric(kr),
Kx = as.numeric(Kx)) %>%
left_join(Barrier_types, by = "ID") %>%
filter(Endodermis %in% c("-", "CS", "Sub") & Exodermis %in% c("-", "CS", "Sub"))
conds <- conds[order(conds$kr),]
# pander(conds)
# Quick and uggly Plot
ggplot(data = conds) +
geom_col(aes(x = Barrier_name,
y = kr,
fill = Endodermis,
color = Exodermis
),
size = 2
) +
scale_color_viridis(discrete = T, option = "plasma") +
scale_fill_viridis(discrete = T, option = "plasma") +
theme_classic() +
# facet_wrap(~Exodermis) +
theme(axis.text.x = element_text(angle = 90))
# Quick and uggly Plot
ggplot(data = conds) +
geom_col(aes(x = Barrier_name,
y = kr,
fill = Endodermis,
color = Exodermis
),
size = 2
) +
scale_color_viridis(discrete = T, option = "plasma") +
scale_fill_viridis(discrete = T, option = "plasma") +
theme_grey() +
# facet_wrap(~Exodermis) +
theme(axis.text.x = element_text(angle = 90))
# Quick and uggly Plot
ggplot(data = conds) +
geom_col(aes(x = Barrier_name,
y = kr,
fill = Endodermis,
color = Exodermis
),
size = 2
) +
scale_color_viridis(discrete = T, option = "plasma") +
scale_fill_viridis(discrete = T, option = "plasma") +
theme_dark() +
# facet_wrap(~Exodermis) +
theme(axis.text.x = element_text(angle = 90))
# Quick and uggly Plot
ggplot(data = conds) +
geom_col(aes(x = Barrier_name,
y = kr,
fill = Endodermis,
color = Exodermis
),
size = 2
) +
scale_color_viridis(discrete = T, option = "plasma") +
scale_fill_viridis(discrete = T, option = "plasma") +
theme_black() +
# facet_wrap(~Exodermis) +
theme(axis.text.x = element_text(angle = 90))
# Quick and uggly Plot
ggplot(data = conds) +
geom_col(aes(x = Barrier_name,
y = kr,
fill = Endodermis,
color = Exodermis
),
size = 2
) +
scale_color_viridis(discrete = T, option = "plasma") +
scale_fill_viridis(discrete = T, option = "plasma") +
theme_dark() +
# facet_wrap(~Exodermis) +
theme(axis.text.x = element_text(angle = 90))
# Quick and uggly Plot
ggplot(data = conds) +
geom_col(aes(x = Barrier_name,
y = kr,
fill = Endodermis,
color = Exodermis
),
size = 2,
width = 1
) +
scale_color_viridis(discrete = T, option = "plasma") +
scale_fill_viridis(discrete = T, option = "plasma") +
theme_dark() +
# facet_wrap(~Exodermis) +
theme(axis.text.x = element_text(angle = 90))
# Quick and uggly Plot
ggplot(data = conds) +
geom_col(aes(x = Barrier_name,
y = kr,
fill = Endodermis,
color = Exodermis
),
size = 2,
width = 0.5
) +
scale_color_viridis(discrete = T, option = "plasma") +
scale_fill_viridis(discrete = T, option = "plasma") +
theme_dark() +
# facet_wrap(~Exodermis) +
theme(axis.text.x = element_text(angle = 90))
# Quick and uggly Plot
ggplot(data = conds) +
geom_col(aes(x = Barrier_name,
y = kr,
fill = Endodermis,
color = Exodermis
),
size = 2,
width = 0.75
) +
scale_color_viridis(discrete = T, option = "plasma") +
scale_fill_viridis(discrete = T, option = "plasma") +
theme_dark() +
# facet_wrap(~Exodermis) +
theme(axis.text.x = element_text(angle = 90))
# Quick and uggly Plot
ggplot(data = conds) +
geom_col(aes(x = Barrier_name,
y = kr,
fill = Endodermis,
color = Exodermis
),
size = 2,
width = 0.9
) +
scale_color_viridis(discrete = T, option = "plasma") +
scale_fill_viridis(discrete = T, option = "plasma") +
theme_dark() +
# facet_wrap(~Exodermis) +
theme(axis.text.x = element_text(angle = 90))
# Quick and uggly Plot
ggplot(data = conds) +
geom_col(aes(x = Barrier_name,
y = kr,
fill = Endodermis,
color = Exodermis
),
size = 2,
width = 0.85
) +
scale_color_viridis(discrete = T, option = "plasma") +
scale_fill_viridis(discrete = T, option = "plasma") +
theme_dark() +
# facet_wrap(~Exodermis) +
theme(axis.text.x = element_text(angle = 90))
# Quick and uggly Plot
ggplot(data = conds) +
geom_col(aes(x = Barrier_name,
y = kr,
fill = Endodermis,
color = Exodermis
),
size = 2,
width = 0.85
) +
scale_color_viridis(discrete = T, option = "plasma") +
scale_fill_viridis(discrete = T, option = "plasma") +
theme_test() +
# facet_wrap(~Exodermis) +
theme(axis.text.x = element_text(angle = 90))
# Quick and uggly Plot
ggplot(data = conds) +
geom_col(aes(x = Barrier_name,
y = kr,
fill = Endodermis,
color = Exodermis
),
size = 2,
width = 0.85
) +
scale_color_viridis(discrete = T) +
scale_fill_viridis(discrete = T, option = "plasma") +
theme_test() +
# facet_wrap(~Exodermis) +
theme(axis.text.x = element_text(angle = 90))
# Quick and uggly Plot
ggplot(data = conds) +
geom_col(aes(x = Barrier_name,
y = kr,
fill = Endodermis,
color = Exodermis
),
size = 2,
width = 0.85
) +
scale_color_viridis(discrete = T) +
scale_fill_viridis(discrete = T) +
theme_test() +
# facet_wrap(~Exodermis) +
theme(axis.text.x = element_text(angle = 90))
# Load Barriers names and IDs
Barrier_types <- read_xlsx("./MECHA/Barrier_types.xlsx") %>%
mutate(ID = as.factor(ID)) %>%
mutate(Barrier_name = paste0("En.", Endodermis, " - Ex.", Exodermis))
View(Barrier_types)
# Use custom function to load outputs of MECHA
conds <- load_MECHA_out()
View(conds)
# Load Barriers names and IDs
Barrier_types <- read_xlsx("./MECHA/Barrier_types.xlsx") %>%
mutate(ID = as.factor(ID)) %>%
mutate(Barrier_name = paste0("En.", Endodermis, " - Ex.", Exodermis))
# Use custom function to load outputs of MECHA
conds <- load_MECHA_out()
# Process and select the outputs
conds <- conds %>%
mutate(ID = as.factor(ID),
kr = as.numeric(kr),
Kx = as.numeric(Kx)) %>%
left_join(Barrier_types, by = "ID") %>%
filter(Endodermis %in% c("-", "CS", "Sub") & Exodermis %in% c("-", "CS", "Sub"))
conds <- conds[order(conds$kr),]
# pander(conds)
# Quick and uggly Plot
ggplot(data = conds) +
geom_col(aes(x = Barrier_name,
y = kr,
fill = Endodermis,
color = Exodermis
),
size = 2,
width = 0.85
) +
scale_color_viridis(discrete = T) +
scale_fill_viridis(discrete = T) +
theme_test() +
# facet_wrap(~Exodermis) +
theme(axis.text.x = element_text(angle = 90))
param2 <- read_param_xml(path = "Params/Tomato_primary.xml")
sim2 <- suppressWarnings(create_anatomy(parameters = param2))
plot_anatomy(sim2)
param3 <- read_param_xml(path = "Params/Tomato_secondary.xml")
sim3 <- suppressWarnings(create_anatomy(parameters = param3))
View(param2)
plot_anatomy(sim3)
